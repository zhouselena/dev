name: GoDriver Performance Notification
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
jobs:
  add-pr-comment:
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
    permissions:
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Install MongoDB driver
        run: npm install mongodb
      - name: Add comment to new PR with performance data
        uses: actions/github-script@v7
        with:
          script: >
            const { MongoClient } = require('mongodb');

            const prNumber = context.payload.pull_request.number;

            const repo = context.repo;

            const COMMENT_MARKER = '<!-- perf-notif-comment -->'; // unique marker to identify perf comments


            // MongoDB Atlas connection details

            const uri = process.env.MONGO_URI;

            const dbName = "dummyAnalytics";

            const collectionName = "dummyTimeSeries";


            // Initialize comment body. This will be overwritten if no documents are found.

            let commentBody = `

            # ðŸ‘‹ GoDriver Performance Notification

            The following benchmark tests had statistically significant changes (i.e., h-score > 0.6):\n`;


            let client;

            try {
              client = new MongoClient(uri);
              await client.connect();
              console.log("Successfully connected to MongoDB Atlas.");

              const database = client.db(dbName);
              const collection = database.collection(collectionName);

              const query = {
                "project": "mongo-go-driver",
                "variant": "perf",
                "task": "perf",
              };

              const documents = await collection.find(query).toArray();
              console.log(`Found ${documents.length} documents matching the query.`);

              if (documents.length > 0) {
                commentBody += `| Test Name | H-Score | Performance Baron |\n`;
                commentBody += `|---|---|---|\n`;
                documents.forEach(doc => {
                  const testName = doc.test || doc._id.toString();
                  const hScore = '0.6'; // dummy h-score for now
                  const link = '[link](https://example.com)'; // dummy link for now
                  commentBody += `| ${testName} | ${hScore} | ${link} |\n`;
                });
                commentBody += `\n*For a comprehensive view of all microbenchmark results for this PR's commit, please visit [this link](https://example.com).*`
              } else {
                commentBody = "There were no significant changes to the performance to report.";
                console.log("No documents found.");
              }

            } catch (error) {
              console.error("Error connecting to or querying MongoDB:", error);
              commentBody = `*Error retrieving performance data: ${error.message}*
                              Please check the MongoDB connection string and query.`;
            } finally {
              if (client) {
                await client.close();
                console.log("MongoDB connection closed.");
              }
            }


            // Append the unique marker to the comment content

            commentBody += `\n\n${COMMENT_MARKER}`;


            // If this is the first time the PR is created, make a new comment.

            // Otherwise fetch previously created comment and update it.

            // This is to decrease clutter from multiple comments.

            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
            });


            const existingComment = comments.find(comment =>
              comment.body.includes(COMMENT_MARKER)
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
              console.log(`Updated existing comment #${existingComment.id} on PR #${prNumber}.`);
            } else {
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
              console.log(`Created new comment on PR #${prNumber}.`);
            }
